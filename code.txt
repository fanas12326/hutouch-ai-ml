import 'package:flutter/material.dart';

// Chat Model
class Chat {
  final String name;
  final String avatarUrl;
  final String time;

  Chat({
    required this.name,
    required this.avatarUrl,
    required this.time,
  });
}

// Sample Data
List<Chat> chats = [
  Chat(
    name: "Jane Doe",
    avatarUrl: "assets/jane_doe1.jpg",
    time: "15:14",
  ),
  Chat(
    name: "John Doe",
    avatarUrl: "assets/john_doe1.jpg",
    time: "15:14",
  ),
  Chat(
    name: "Jane Doe",
    avatarUrl: "assets/jane_doe2.jpg",
    time: "15:14",
  ),
  Chat(
    name: "John Doe",
    avatarUrl: "assets/john_doe2.jpg",
    time: "15:30",
  ),
  // Add more chat data here
];

// Chat Item Widget
class ChatItem extends StatelessWidget {
  final Chat chat;

  ChatItem({required this.chat});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      leading: CircleAvatar(
        backgroundImage: AssetImage(chat.avatarUrl),
      ),
      title: Text(chat.name),
      subtitle: Text(chat.time),
      onTap: () {
        // Handle chat item tap
      },
    );
  }
}

// Chat List Screen
class ChatListScreen extends StatefulWidget {
  @override
  _ChatListScreenState createState() => _ChatListScreenState();
}

class _ChatListScreenState extends State<ChatListScreen> {
  List<Chat> displayedChats = chats;
  String searchQuery = "";

  void _searchChats(String query) {
    setState(() {
      searchQuery = query.toLowerCase();
      displayedChats = chats
          .where((chat) =>
              chat.name.toLowerCase().contains(searchQuery) ||
              chat.time.toLowerCase().contains(searchQuery))
          .toList();
    });
  }

  void _filterChats(bool isLatest) {
    setState(() {
      displayedChats.sort((a, b) {
        return isLatest ? b.time.compareTo(a.time) : a.time.compareTo(b.time);
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("WhatsApp"),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () {
              showSearch(
                  context: context,
                  delegate: ChatSearch(displayedChats, _searchChats));
            },
          ),
          IconButton(
            icon: Icon(Icons.more_vert),
            onPressed: () {
              // Handle more options action
              showModalBottomSheet(
                context: context,
                builder: (context) {
                  return ListView(
                    children: [
                      ListTile(
                        title: Text("Latest"),
                        onTap: () {
                          Navigator.pop(context);
                          _filterChats(true);
                        },
                      ),
                      ListTile(
                        title: Text("Oldest"),
                        onTap: () {
                          Navigator.pop(context);
                          _filterChats(false);
                        },
                      ),
                    ],
                  );
                },
              );
            },
          ),
        ],
      ),
      body: DefaultTabController(
        length: 3,
        child: Column(
          children: [
            TabBar(
              tabs: [
                Tab(text: "CHATS"),
                Tab(text: "STATUS"),
                Tab(text: "CALLS"),
              ],
            ),
            Expanded(
              child: TabBarView(
                children: [
                  ListView.builder(
                    itemCount: displayedChats.length,
                    itemBuilder: (context, index) {
                      return ChatItem(chat: displayedChats[index]);
                    },
                  ),
                  Center(child: Text("STATUS")),
                  Center(child: Text("CALLS")),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Custom Search Delegate for Chat Search
class ChatSearch extends SearchDelegate {
  final List<Chat> chats;
  final Function(String) searchCallback;

  ChatSearch(this.chats, this.searchCallback);

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = "";
          showSuggestions(context);
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.arrow_back),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    searchCallback(query);
    List<Chat> searchResults = chats
        .where((chat) =>
            chat.name.toLowerCase().contains(query.toLowerCase()) ||
            chat.time.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return ListView.builder(
      itemCount: searchResults.length,
      itemBuilder: (context, index) {
        return ChatItem(chat: searchResults[index]);
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    List<Chat> searchResults = chats
        .where((chat) =>
            chat.name.toLowerCase().contains(query.toLowerCase()) ||
            chat.time.toLowerCase().contains(query.toLowerCase()))
        .toList();

    return ListView.builder(
      itemCount: searchResults.length,
      itemBuilder: (context, index) {
        return ChatItem(chat: searchResults[index]);
      },
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: ChatListScreen(),
  ));
}
